const int redPin = 2;
const int greenPin = 3;
const int bluePin = 4;

const int buttonOne = 12;
const int buttonTwo = 13;

int blinkSpeed[] = {1000, 500, 250};
int blinkIndex = 0;

bool isReversed = false;
int counterValue = 0;      

enum StateMachine { START, COUNT } currentState;

void updateLEDs(int counterValue) {
  int redState = (counterValue / 4) % 2;
  int greenState = (counterValue / 2) % 2;
  int blueState = counterValue % 2;

  digitalWrite(redPin, redState);
  digitalWrite(greenPin, greenState);
  digitalWrite(bluePin, blueState);
}

void handleBinaryCounter() {
  switch (currentState) {
    case START:
      currentState = COUNT;
      break;

    case COUNT:
      if (digitalRead(buttonOne) == HIGH) {
        isReversed = !isReversed;
        delay(100);
      }

      if (digitalRead(buttonTwo) == HIGH) {
        blinkIndex = (blinkIndex + 1) % 3;
        delay(100);
      }

      if (isReversed) {
        counterValue = counterValue - 1;
        if (counterValue < 0) {
          counterValue = 7;
        }
      } else {
          counterValue = counterValue + 1;
          if (counterValue > 7) {
            counterValue = 0;
        }
      }
      
      updateLEDs(counterValue);
      currentState = COUNT;
      break;

    default:
      currentState = START;
      break;
  }
}

void setup() {
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
  pinMode(buttonOne, INPUT);
  pinMode(buttonTwo, INPUT);
  
  currentState = START;
}

void loop() {
  handleBinaryCounter();
  delay(blinkSpeed[blinkIndex]);
}
